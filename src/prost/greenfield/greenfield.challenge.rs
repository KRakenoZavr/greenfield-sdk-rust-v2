// @generated
/// Slash records the storage provider slashes, which will be pruned periodically.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Slash {
    /// The slashed storage provider.
    #[prost(bytes = "vec", tag = "1")]
    pub sp_operator_address: ::prost::alloc::vec::Vec<u8>,
    /// The slashed object info.
    #[prost(string, tag = "2")]
    pub object_id: ::prost::alloc::string::String,
    /// The height when the slash happened, which is used for prune purpose.
    #[prost(uint64, tag = "3")]
    pub height: u64,
}
/// Challenge records the challenge which are not expired yet.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Challenge {
    /// The id of the challenge.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The height at which the challenge will be expired.
    #[prost(uint64, tag = "2")]
    pub expired_height: u64,
}
/// AttestedChallengeIds stored fixed number of the latest attested challenge ids.
/// To use the storage more efficiently, a circular queue will be constructed using these fields.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttestedChallengeIds {
    /// The fixed number of challenge ids to save.
    #[prost(uint64, tag = "1")]
    pub size: u64,
    /// The latest attested challenge ids.
    #[prost(uint64, repeated, tag = "2")]
    pub ids: ::prost::alloc::vec::Vec<u64>,
    /// The cursor to retrieve data from the ids field.
    #[prost(int64, tag = "3")]
    pub cursor: i64,
}
/// VoteResult defines the result attestation for a challenge.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VoteResult {
    /// The challenge failed.
    ChallengeFailed = 0,
    /// The challenge succeed.
    ChallengeSucceed = 1,
}
impl VoteResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VoteResult::ChallengeFailed => "CHALLENGE_FAILED",
            VoteResult::ChallengeSucceed => "CHALLENGE_SUCCEED",
        }
    }
}
/// EventStartChallenge to indicate a challenge has bee created.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventStartChallenge {
    /// The id of challenge, which is generated by blockchain.
    #[prost(uint64, tag = "1")]
    pub challenge_id: u64,
    /// The id of object info to be challenged.
    #[prost(string, tag = "2")]
    pub object_id: ::prost::alloc::string::String,
    /// The segment/piece index of the object info.
    #[prost(uint32, tag = "3")]
    pub segment_index: u32,
    /// The storage provider to be challenged.
    #[prost(string, tag = "4")]
    pub sp_operator_address: ::prost::alloc::string::String,
    /// The redundancy index, which comes from the index of storage providers.
    #[prost(int32, tag = "5")]
    pub redundancy_index: i32,
    /// The challenger who submits the challenge.
    #[prost(string, tag = "6")]
    pub challenger_address: ::prost::alloc::string::String,
    /// The challenge will be expired after this height
    #[prost(uint64, tag = "7")]
    pub expired_height: u64,
}
/// EventAttestChallenge to indicate a challenge has been attested.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventAttestChallenge {
    /// The id of challenge.
    #[prost(uint64, tag = "1")]
    pub challenge_id: u64,
    /// The result of challenge.
    #[prost(enumeration = "VoteResult", tag = "2")]
    pub result: i32,
    /// The slashed storage provider address.
    #[prost(string, tag = "3")]
    pub sp_operator_address: ::prost::alloc::string::String,
    /// The slashed amount from the storage provider.
    #[prost(string, tag = "4")]
    pub slash_amount: ::prost::alloc::string::String,
    /// The address of challenger.
    #[prost(string, tag = "5")]
    pub challenger_address: ::prost::alloc::string::String,
    /// The reward amount to the challenger.
    #[prost(string, tag = "6")]
    pub challenger_reward_amount: ::prost::alloc::string::String,
    /// The submitter of the challenge attestation.
    #[prost(string, tag = "7")]
    pub submitter_address: ::prost::alloc::string::String,
    /// The reward amount to the submitter.
    #[prost(string, tag = "8")]
    pub submitter_reward_amount: ::prost::alloc::string::String,
    /// The reward amount to all current validators.
    #[prost(string, tag = "10")]
    pub validator_reward_amount: ::prost::alloc::string::String,
}
/// Params defines the parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// Challenges which will be emitted in each block, including user submitted or randomly triggered.
    #[prost(uint64, tag = "1")]
    pub challenge_count_per_block: u64,
    /// Challenges will be expired after the period, including user submitted or randomly triggered.
    #[prost(uint64, tag = "2")]
    pub challenge_keep_alive_period: u64,
    /// The count of blocks to stand for the period in which the same storage and object info cannot be slashed again.
    #[prost(uint64, tag = "3")]
    pub slash_cooling_off_period: u64,
    /// The slash coin amount will be calculated from the size of object info, and adjusted by this rate.
    #[prost(string, tag = "4")]
    pub slash_amount_size_rate: ::prost::alloc::string::String,
    /// The minimal slash amount.
    #[prost(string, tag = "5")]
    pub slash_amount_min: ::prost::alloc::string::String,
    /// The maximum slash amount.
    #[prost(string, tag = "6")]
    pub slash_amount_max: ::prost::alloc::string::String,
    /// The ratio of slash amount to reward all current validators.
    #[prost(string, tag = "7")]
    pub reward_validator_ratio: ::prost::alloc::string::String,
    /// The ratio of reward amount to reward attestation submitter.
    #[prost(string, tag = "8")]
    pub reward_submitter_ratio: ::prost::alloc::string::String,
    /// The reward amount to submitter will be adjusted by the threshold.
    #[prost(string, tag = "9")]
    pub reward_submitter_threshold: ::prost::alloc::string::String,
    /// Heartbeat interval, based on challenge id, defines the frequency of heartbeat attestation.
    #[prost(uint64, tag = "10")]
    pub heartbeat_interval: u64,
    /// The time duration for each submitter to submit attestations in turn.
    #[prost(uint64, tag = "11")]
    pub attestation_inturn_interval: u64,
    /// The number of kept attested challenge ids, which can be queried by clients.
    #[prost(uint64, tag = "12")]
    pub attestation_kept_count: u64,
}
/// GenesisState defines the challenge module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// this line is used by starport scaffolding # genesis/proto/state
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// QueryLatestAttestedChallengesRequest is request type for the Query/LatestAttestedChallenges RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLatestAttestedChallengesRequest {}
/// QueryLatestAttestedChallengesResponse is response type for the Query/LatestAttestedChallenges RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLatestAttestedChallengesResponse {
    #[prost(uint64, repeated, tag = "1")]
    pub challenge_ids: ::prost::alloc::vec::Vec<u64>,
}
/// QueryInturnAttestationSubmitterRequest is request type for the Query/InturnAttestationSubmitter RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInturnAttestationSubmitterRequest {}
/// QueryInturnAttestationSubmitterResponse is response type for the Query/InturnAttestationSubmitter RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInturnAttestationSubmitterResponse {
    #[prost(string, tag = "1")]
    pub bls_pub_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub submit_interval: ::core::option::Option<SubmitInterval>,
}
/// SubmitInterval holds start and end (exclusive) (i.e., [start, end)) time of in turn attestation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitInterval {
    #[prost(uint64, tag = "1")]
    pub start: u64,
    #[prost(uint64, tag = "2")]
    pub end: u64,
}
/// MsgSubmit defines the message for submitting challenges.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmit {
    /// The challenger address.
    #[prost(string, tag = "1")]
    pub challenger: ::prost::alloc::string::String,
    /// The storage provider to be challenged.
    #[prost(string, tag = "2")]
    pub sp_operator_address: ::prost::alloc::string::String,
    /// The bucket of the object info to be challenged.
    #[prost(string, tag = "3")]
    pub bucket_name: ::prost::alloc::string::String,
    /// The name of the object info to be challenged.
    #[prost(string, tag = "4")]
    pub object_name: ::prost::alloc::string::String,
    /// The index of segment/piece to challenge, start from zero.
    #[prost(uint32, tag = "5")]
    pub segment_index: u32,
    /// Randomly pick a segment/piece to challenge or not.
    #[prost(bool, tag = "6")]
    pub random_index: bool,
}
/// MsgSubmitResponse defines the response of MsgSubmit.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitResponse {}
/// MsgSubmit defines the message for attesting challenges.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAttest {
    /// The submitter address.
    #[prost(string, tag = "1")]
    pub submitter: ::prost::alloc::string::String,
    /// The id of the challenge.
    #[prost(uint64, tag = "2")]
    pub challenge_id: u64,
    /// The id of the object info.
    #[prost(string, tag = "3")]
    pub object_id: ::prost::alloc::string::String,
    /// The storage provider to be challenged.
    #[prost(string, tag = "4")]
    pub sp_operator_address: ::prost::alloc::string::String,
    /// Vote result of the attestation.
    #[prost(enumeration = "VoteResult", tag = "5")]
    pub vote_result: i32,
    /// The challenger who submits the challenge, which can be empty.
    #[prost(string, tag = "6")]
    pub challenger_address: ::prost::alloc::string::String,
    /// The validators participated in the attestation.
    #[prost(fixed64, repeated, tag = "7")]
    pub vote_validator_set: ::prost::alloc::vec::Vec<u64>,
    /// The aggregated BLS signature from the validators.
    #[prost(bytes = "vec", tag = "8")]
    pub vote_agg_signature: ::prost::alloc::vec::Vec<u8>,
}
/// MsgAttest defines the response of MsgAttestResponse.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAttestResponse {}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/challenge parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
/// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
include!("greenfield.challenge.tonic.rs");
// @@protoc_insertion_point(module)
